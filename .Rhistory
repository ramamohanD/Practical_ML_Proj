library(caret)
library(caret)
library(rpart)
library(rpart.plot)
set.seed(7315)
trainingset <- read.csv("C:/Rama Mohan D/Learning/PML_Project/trainingdata.csv", na.strings=c("NA","#DIV/0!", ""))
testingset <- read.csv("C:/Rama Mohan D/Learning/PML_Project/testingdata.csv", na.strings=c("NA","#DIV/0!", ""))
library(caret)
library(rpart)
library(rpart.plot)
set.seed(7315)
trainingset <- read.csv("C:/Rama Mohan D/Learning/PML_Project/tpml-training.csv", na.strings=c("NA","#DIV/0!", ""))
testingset <- read.csv("C:/Rama Mohan D/Learning/PML_Project/pml-testing.csv", na.strings=c("NA","#DIV/0!", ""))
library(caret)
library(rpart)
library(rpart.plot)
set.seed(7315)
trainingset <- read.csv("C:/Rama Mohan D/Learning/PML_Project/tpml-training.csv", na.strings=c("NA","#DIV/0!", ""))
testingset <- read.csv("C:/Rama Mohan D/Learning/PML_Project/pml-testing.csv", na.strings=c("NA","#DIV/0!", ""))
trainingset <- read.csv("C:/Rama Mohan D/Learning/PML_Project/pml-training.csv", na.strings=c("NA","#DIV/0!", ""))
testingset <- read.csv("C:/Rama Mohan D/Learning/PML_Project/pml-testing.csv", na.strings=c("NA","#DIV/0!", ""))
dim(trainingset)
dim(testingset)
library(caret)
library(rpart)
library(rpart.plot)
set.seed(7315)
install.packages("rpart.plot")
install.packages("rpart.plot")
??rpart
dim(trainingset)
dim(testingset)
# Delete columns with all missing values
trainingset<-trainingset[,colSums(is.na(trainingset)) == 0]
testingset <-testingset[,colSums(is.na(testingset)) == 0]
# Some variables are irrelevant to our current project: user_name, raw_timestamp_part_1, raw_timestamp_part_,2 cvtd_timestamp, new_window, and  num_window (columns 1 to 7). We can delete these variables.
trainingset   <-trainingset[,-c(1:7)]
testingset <-testingset[,-c(1:7)]
# and have a look at our new datasets:
dim(trainingset)
dim(testingset)
head(trainingset)
head(testingset)
subsamples <- createDataPartition(y=trainingset$classe, p=0.75, list=FALSE)
subTraining <- trainingset[subsamples, ]
subTesting <- trainingset[-subsamples, ]
dim(subTraining)
dim(subTesting)
head(subTraining)
head(subTesting)
plot(subTraining$classe, col="blue", main="Bar Plot of levels of the variable classe within the subTraining data set", xlab="classe levels", ylab="Frequency")
plot(subTraining$classe, col="red", main="Bar Plot of levels of the variable classe within the subTraining data set", xlab="classe levels", ylab="Frequency")
hist(subTraining$classe, col="red", main="Bar Plot of levels of the variable classe within the subTraining data set", xlab="classe levels", ylab="Frequency")
model1 <- rpart(classe ~ ., data=subTraining, method="class")
# Predicting:
prediction1 <- predict(model1, subTesting, type = "class")
head(prediction1)
rpart.plot(model1, main="Classification Tree", extra=102, under=TRUE, faclen=0)
?rpart.plot
??rpart.plot
??plot.rpart
plot(model1, main="Classification Tree", extra=102, under=TRUE, faclen=0)
fancyRpartPlot(model1)
?fancyRpartplot
??fancyRpartplot
install.packages("rpart.plot")
setwd("C:/Rama Mohan D/Learning/PML_Project")
dir()
library(caret)
library(rpart)
#library(rpart.plot)
set.seed(7315)
# Loading the training data set into my R session replacing all missing with "NA"
trainingset <- read.csv("C:/Rama Mohan D/Learning/PML_Project/pml-training.csv", na.strings=c("NA","#DIV/0!", ""))
# Loading the testing data set
testingset <- read.csv("C:/Rama Mohan D/Learning/PML_Project/pml-testing.csv", na.strings=c("NA","#DIV/0!", ""))
dim(trainingset)
dim(testingset)
# Delete columns with all missing values
trainingset<-trainingset[,colSums(is.na(trainingset)) == 0]
testingset <-testingset[,colSums(is.na(testingset)) == 0]
# Some variables are irrelevant to our current project: user_name, raw_timestamp_part_1, raw_timestamp_part_,2 cvtd_timestamp, new_window, and  num_window (columns 1 to 7). We can delete these variables.
trainingset   <-trainingset[,-c(1:7)]
testingset <-testingset[,-c(1:7)]
# and have a look at our new datasets:
dim(trainingset)
dim(testingset)
head(trainingset)
head(testingset)
subsamples <- createDataPartition(y=trainingset$classe, p=0.75, list=FALSE)
subTraining <- trainingset[subsamples, ]
subTesting <- trainingset[-subsamples, ]
dim(subTraining)
dim(subTesting)
head(subTraining)
head(subTesting)
plot(subTraining$classe, col="red", main="Bar Plot of levels of the variable classe within the subTraining data set", xlab="classe levels", ylab="Frequency")
model1 <- rpart(classe ~ ., data=subTraining, method="class")
# Predicting:
prediction1 <- predict(model1, subTesting, type = "class")
library(rpart.plot)
install.packages("rpart.plot")
Library(rpart.plot)
Library(rpart.plot)
library(rpart.plot)
rpart.plot(model1, main="Classification Tree", extra=102, under=TRUE, faclen=0)
fancyRpartPlot(model1)
??fancyRpartplot
??fancyRpartPlot
??fancyRpartPlot
install.packages("rattle")
install.packages("RColorBrewer")
library(rattle)
library(RColorBrewer)
fancyRpartPlot(model1)
fancyRpartPlot(model1)
fancyRpartPlot(model1)
model1 <- rpart(classe ~ ., data=subTraining, method="class")
# Predicting:
prediction1 <- predict(model1, subTesting, type = "class")
# Plot of the Decision Tree
rpart.plot(model1, main="Classification Tree", extra=102, under=TRUE, faclen=0)
fancyRpartPlot(model1)
rpart.plot(model1, main="Classification Tree", extra=102, under=TRUE, faclen=0)
?fancyRpartPlot
## Use rpart to build a decision tree.
library(rpart)
## Set up the data for modelling.
set.seed(42)
ds     <- weather
target <- "RainTomorrow"
risk   <- "RISK_MM"
ignore <- c("Date", "Location", risk)
vars   <- setdiff(names(ds), ignore)
nobs   <- nrow(ds)
form   <- formula(paste(target, "~ ."))
train  <- sample(nobs, 0.7*nobs)
test   <- setdiff(seq_len(nobs), train)
actual <- ds[test, target]
risks  <- ds[test, risk]
# Build the model.
model <- rpart(form, data=ds[train, vars])
## Plot the model.
fancyRpartPlot(model)
plot(model1)
text(model1)
confusionMatrix(prediction1, subTesting$classe)
install.packages("e1071")
confusionMatrix(prediction1, subTesting$classe)
confusionMatrix(prediction1, subTesting$classe)
library(e1071)
??confusionmatrix
prediction1
subTesting$classe
dim(prediction1)
head(prediction1)
head(subTesting$classe)
confusionMatrix(prediction1, subTesting$classe)
install.packages("e1071")
confusionMatrix(prediction1, subTesting$classe)
predictfinal <- predict(model1, testingset, type="class")
predictfinal
# Write files for submission
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(predictfinal)
confusionMatrix(prediction1, subTesting$classe)
#Using Randome forest
model2 <- randomForest(classe ~. , data=subTraining, method="class")
# Predicting:
prediction2 <- predict(model2, subTesting, type = "class")
# Test results on subTesting data set:
confusionMatrix(prediction2, subTesting$classe)
??randomforest
library(rattle)
library(randomForest)
install.packages("randomForest")
library(randomForest)
#Using Randome forest
model2 <- randomForest(classe ~. , data=subTraining, method="class")
# Predicting:
prediction2 <- predict(model2, subTesting, type = "class")
# Test results on subTesting data set:
confusionMatrix(prediction2, subTesting$classe)
predictfinal1 <- predict(model1, testingset, type="class")
predictfinal2 <- predict(model2, testingset, type="class")
# Write files for submission
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(predictfinal2)
??caret
??Randomforest
tt=[1;2;3;4;5]
tt=c[1;2;3;4;5]
tt=c(1,2,3,4,5)
head(tt)
tt2=(c(1,2,3,4,5))*2
tk = cbind(tt,tt2)
tk
head(tk)
head(tk,2)
head(trainingset,2)
fancyRpartPlot(model1)
rpart.plot(model1)
rpart.plot(model1, main="Classification Tree", extra=102, under=TRUE, faclen=0)
fancyRpartPlot(model1)
plot(model2)
fancyRpartPlot(model2)
getTree(model2, 1, labelVar=TRUE)
test <- getTree(model2, 1, labelVar=TRUE)
head(test)
rfmodeldetails <- getTree(model2, 1, labelVar=TRUE)
head(rfmodeldetails,3)
**Background**
